{"version":3,"sources":["container/styledComponent.js","modules/movieData/utils.js","constants.js","modules/movieData/index.js","modules/movieFilter/index.js","component/CheckboxGroup.js","component/Slider.js","component/MovieItem.js","component/MovieModal.js","component/Switch.js","component/SearchBox.js","component/Dropdown.js","container/MovieList.js","container/TitleWrapper.js","container/MovieFilter.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","HorizontalFlexWrapper","VerticalFlexWrapper","CenteredWrapper","TextWrapper","Gap","props","width","height","BoldWrapper","Root","Header","Body","MovieItemWrapper","MovieItemSwatch","img","MovieModalSwatchWrapper","MovieModalSwatch","fetchMovieFromDB","a","options","page","endpoint","process","fetch","res","status","Error","message","json","movieDataSlice","createSlice","name","initialState","data","loading","reducers","setMovieData","state","action","payload","forEach","payloadData","setLoading","actions","fetchMovieData","dispatch","getState","movieData","Array","isArray","fetchPageIdx","pageValue","Number","isNaN","Math","floor","push","length","Promise","all","map","pageIdx","console","error","getRawMovieData","selectMovieData","createSelector","recursivelyFlat","subarray","target","el","filter","item","results","selectFirstUnfetchedPage","selectHasMoreData","unfetchedPage","total_pages","selectLoadingMovieData","sortOptions","b","vote_average","title","localeCompare","Date","release_date","movieFilterSlice","language","voting","min","max","selectMin","selectMax","adult","search","sort","setLanguage","setVoting","undefined","setAdult","setSearch","setSort","getApplyLanguageFilter","movieFilter","languageData","Object","keys","selectLanguageOption","languageSet","Set","add","original_language","from","selectFilteredMovie","filterData","applyLanguageFilter","filteredMovieData","splitSearch","split","word","toLowerCase","indexOf","selectMovieLanguage","selectMovieVoting","selectMovieAdult","selectMovieSort","checked","onOptionClick","option","idx","key","data-testid","onChange","marks","range","defaultValue","step","MovieItem","swatch","rating","onClick","src","alt","allowHalf","disabled","value","MovieModal","vote_count","overview","visible","onClose","centered","footer","onCancel","placement","type","percent","strokeColor","getColorGradient","ratio","placeholder","onSearch","Search","enterButton","select","menu","Item","overlay","className","href","e","preventDefault","DownOutlined","MovieList","bodyRef","useRef","useState","setWidth","modalItem","setModalItem","hasMore","setHasMore","movieList","useSelector","hasMoreData","nextFetchPage","useDispatch","handleResize","current","offsetWidth","useEffect","offsetHeight","window","addEventListener","fetchPage","ceil","_","i","removeEventListener","loader","style","marginRight","ref","initialLoad","pageStart","loadMore","useWindow","dataSource","renderItem","parseItemData","grid","gutter","column","getGridColumn","poster_path","children","align","sortDropdownOptions","MovieFilter","languageOptions","setMovieFilterSearch","TitleWrapper","setMovieFilterLanguage","check","setMovieFilterAdult","setMovieFilterVoting","setMovieSort","App","showMenu","setShowMenu","MenuOutlined","position","right","top","fontSize","color","cursor","closable","configureStore","reducer","movieDataReducer","movieFilterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fa11da2.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst HEADER_HEIGHT = 50;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const HorizontalFlexWrapper = styled.div`\n  display: flex;\n`;\n\nexport const VerticalFlexWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const CenteredWrapper = styled(Wrapper)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const TextWrapper = styled.div`\n  padding-bottom: 5px;\n`;\n\nexport const Gap = styled.div`\n  padding-right: ${(props) => props.width || 10}px;\n  padding-bottom: ${(props) => props.height || 10}px;\n`;\nexport const BoldWrapper = styled(TextWrapper)`\n  font-weight: 700;\n`;\n\nexport const Root = styled(Wrapper)`\n  text-align: center;\n  position: relative;\n  overflow: hidden;\n`;\n\nexport const Header = styled(CenteredWrapper)`\n  background-color: #282c34;\n  height: ${HEADER_HEIGHT}px;\n  color: white;\n  font-size: 25px;\n`;\n\nexport const Body = styled(Wrapper)`\n  margin-top: ${HEADER_HEIGHT}px;\n  top: 0px;\n  height: calc(100% - ${HEADER_HEIGHT}px);\n  width: 100%;\n  padding: 15px;\n  position: absolute;\n  overflow-x: auto;\n`;\n\nexport const MovieItemWrapper = styled(VerticalFlexWrapper)`\n  padding-bottom: 20px;\n  position: relative;\n`;\n\nexport const MovieItemSwatch = styled.img`\n  width: 100%;\n  position: relative;\n  padding-bottom: 10px;\n  cursor: pointer;\n  top: 0px;\n  &:hover {\n    top: -3px;\n  }\n`;\n\nexport const MovieModalSwatchWrapper = styled.div`\n  max-width: 50%;\n  min-width: 140px;\n  padding-right: 10px;\n`;\nexport const MovieModalSwatch = styled.img`\n  width: 100%;\n`;\n","import { MOVIE_DB_ENDPOINT } from '../../constants';\n\n/**\n * fetch movie data from data base\n * @param {*} options\n * @param options.page specific a certain page to load, default is page 1\n */\nexport const fetchMovieFromDB = async (options = {}) => {\n  const { page } = options;\n  let endpoint = `${MOVIE_DB_ENDPOINT}?api_key=${\n    process.env.REACT_APP_MOVIE_DB_API_KEY\n  }`;\n\n  if (page) endpoint += `&page=${page}`;\n\n  const res = await fetch(endpoint);\n  if (res.status !== 200)\n    throw new Error({ message: `Fetch Data fail with status ${res.status}` });\n  return res.json();\n};\n\n/**\n *\n * @param {Array} nestedArray array with nested array structure\n * the function will recursively loop and flat the nested array\n * flat is not cross platform supported, i.e., some broswer and nodejs\n *\n * return an array with all the nested array flated\n */\nexport const flat = (nestedArray) => {\n  const recursivelyFlat = (subarray, target) => {\n    for (let el of subarray) {\n      // recursive flat if the element is an array, otherwise push to result\n      Array.isArray(el) ? recursivelyFlat(el, target) : target.push(el);\n    }\n    return target;\n  };\n  return recursivelyFlat(nestedArray, []);\n};\n","export const MOVIE_DB_ENDPOINT = 'https://api.themoviedb.org/3/movie/popular';\nexport const POSTER_PREFIX = 'https://image.tmdb.org/t/p/w300_and_h450_bestv2';\n","import { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\n\nimport { fetchMovieFromDB, flat } from './utils';\n\nexport const initialState = { data: [], loading: false };\n\nexport const movieDataSlice = createSlice({\n  name: 'movieData',\n  initialState,\n  reducers: {\n    setMovieData: (state, action) => {\n      action.payload.forEach(\n        (payloadData) => (state.data[payloadData.page - 1] = payloadData)\n      );\n      state.loading = false;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n  },\n});\nconst { setMovieData, setLoading } = movieDataSlice.actions;\n\n/* Actions */\n/**\n * Fetch movie data and update redux store\n * @param {Object} options\n * @param {Array[Number]|Number} options.page // either page a single page using an positive integer or multiply page with an array\n */\nexport const fetchMovieData = (options = {}) => async (dispatch, getState) => {\n  const { movieData } = getState();\n  let page = options.page || 1;\n\n  // convert single page option into array\n  if (!Array.isArray(page)) page = [page];\n\n  const fetchPageIdx = [];\n\n  // valid pageValue and remove already fetched page\n  for (let pageValue of page) {\n    if (\n      Number.isNaN(pageValue) ||\n      Math.floor(pageValue) !== pageValue ||\n      pageValue < 1\n    ) {\n      throw new Error('Page must be an positive interger');\n    }\n    if (!movieData.data[pageValue - 1]) fetchPageIdx.push(pageValue);\n  }\n\n  if (!fetchPageIdx.length) return; // all the page has been fetched\n\n  try {\n    // fetch and update movie data state\n    dispatch(setLoading(true));\n    const data = await Promise.all(\n      fetchPageIdx.map((pageIdx) => fetchMovieFromDB({ page: pageIdx }))\n    );\n    return dispatch(setMovieData(data));\n  } catch (e) {\n    console.error(e);\n    // handle fetch error, such as retry, etc\n  }\n};\n\n/* Selectors */\n\n/* default selector should return the state directly without any logic\nit is used to get raw data from redux store and should only use internally */\nconst getRawMovieData = (state) => state.movieData.data;\n\n/* wrappered selector with logic using reselect that export and used by the app\nthe reselect library will cache the result unless related store changes */\n\n// retrive the existing movie data from state and return it in order\nexport const selectMovieData = createSelector(getRawMovieData, (movieData) =>\n  flat(movieData.filter((item) => !!item).map((item) => item.results))\n);\n\n// finding the first page that has not being fetched\n// searching from page 1\nexport const selectFirstUnfetchedPage = createSelector(\n  getRawMovieData,\n  (movieData) => {\n    let pageIdx = 0;\n    // break the loop when encounter a null or undefined data\n    // then increase the idx by one, this increase will compensate the\n    // offset between page idx and array idx\n    while (movieData[pageIdx++]) {}\n\n    return pageIdx;\n  }\n);\n\n// return false if all movieData has being fetched, otherwise, true\nexport const selectHasMoreData = createSelector(\n  getRawMovieData,\n  selectFirstUnfetchedPage,\n  (movieData, unfetchedPage) =>\n    !movieData.length || unfetchedPage <= movieData[0].total_pages\n);\n\nexport const selectLoadingMovieData = (state) => state.movieData.loading;\n\nexport default movieDataSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\n\nimport { selectMovieData } from '../movieData';\n\nexport const sortOptions = {\n  '': () => {},\n  'Voting: High to Low': (a, b) => b.vote_average - a.vote_average,\n  'Voting: Low to Hight': (a, b) => a.vote_average - b.vote_average,\n  'Alphabetical: Ascending': (a, b) => a.title.localeCompare(b.title),\n  'Alphabetical: Descending': (a, b) => b.title.localeCompare(a.title),\n  'Release Date: Recent to Old': (a, b) =>\n    new Date(b.release_date) - new Date(a.release_date),\n  'Release Date: Old to Recent': (a, b) =>\n    new Date(a.release_date) - new Date(b.release_date),\n};\n\nexport const initialState = {\n  language: {}, // save the user selected language\n  voting: { min: 0, max: 10, selectMin: 0, selectMax: 10 }, // save the min/max voting range\n  adult: false,\n  search: '',\n  sort: '',\n};\n\nexport const movieFilterSlice = createSlice({\n  name: 'movieFilter',\n  initialState,\n  reducers: {\n    setLanguage: (state, action) => {\n      if (state.language[action.payload]) delete state.language[action.payload];\n      else state.language[action.payload] = true;\n    },\n    setVoting: (state, action) => {\n      const { selectMin, selectMax } = action.payload;\n      if (selectMin !== undefined) state.voting.selectMin = selectMin;\n      if (selectMax !== undefined) state.voting.selectMax = selectMax;\n    },\n    setAdult: (state, action) => {\n      state.adult = action.payload;\n    },\n    setSearch: (state, action) => {\n      state.search = action.payload;\n    },\n    setSort: (state, action) => {\n      state.sort = action.payload;\n    },\n  },\n});\n\nconst {\n  setLanguage,\n  setVoting,\n  setAdult,\n  setSearch,\n  setSort,\n} = movieFilterSlice.actions;\n\n/* Actions */\nexport const setMovieFilterLanguage = (language) => (dispatch) =>\n  dispatch(setLanguage(language));\n\nexport const setMovieFilterVoting = ({ min, max }) => (dispatch) =>\n  dispatch(setVoting({ selectMin: min, selectMax: max }));\n\nexport const setMovieFilterAdult = (adult) => (dispatch) =>\n  dispatch(setAdult(adult));\n\nexport const setMovieFilterSearch = (search) => (dispatch) =>\n  dispatch(setSearch(search));\n\nexport const setMovieSort = (sort) => (dispatch) => dispatch(setSort(sort));\n\n/* Selectors */\nconst getRawMovieFilterData = (state) => state.movieFilter;\n\n// The purpose to have getRawMovieLanguageData as a separate function is to make sure\n// reselect update the getApplyLanguageFilter only when language state change\nconst getRawMovieLanguageData = (state) => state.movieFilter.language;\n// no language checked and all language checked should return the same result\n// so we will escape language filter when not selected\nexport const getApplyLanguageFilter = createSelector(\n  getRawMovieLanguageData,\n  (languageData) => !!Object.keys(languageData).length\n);\n\n// loop all movieData and retrive all language options\n// use Set to avoid duplicate\nexport const selectLanguageOption = createSelector(\n  selectMovieData,\n  (movieData) => {\n    const languageSet = new Set();\n    movieData.forEach((data) => languageSet.add(data.original_language));\n    return Array.from(languageSet);\n  }\n);\n\nexport const selectFilteredMovie = createSelector(\n  getRawMovieFilterData,\n  selectMovieData,\n  getApplyLanguageFilter,\n  (filterData, movieData, applyLanguageFilter) => {\n    const { language, voting, adult, search, sort } = filterData;\n    const filteredMovieData = movieData.filter((data) => {\n      // valid language\n      if (applyLanguageFilter && !language[data.original_language])\n        return false;\n\n      // valid voting\n      if (\n        data.vote_average < voting.selectMin ||\n        data.vote_average > voting.selectMax\n      )\n        return false;\n\n      // valid adult\n      if (adult && !data.adult) return false;\n\n      if (search) {\n        // split by space and remove enpty string (when user mistype 2 or more space together)\n        const splitSearch = search.split(' ').filter((a) => a);\n        for (let word of splitSearch)\n          if (data.title.toLowerCase().indexOf(word.toLowerCase()) === -1)\n            return false;\n      }\n      return true;\n    });\n    if (!sort || !sortOptions[sort]) return filteredMovieData;\n\n    return filteredMovieData.sort(sortOptions[sort]);\n  }\n);\n\nexport const selectMovieLanguage = (state) => state.movieFilter.language;\n\nexport const selectMovieVoting = (state) => state.movieFilter.voting;\n\nexport const selectMovieAdult = (state) => state.movieFilter.adult;\n\nexport const selectMovieSearch = (state) => state.movieFilter.search;\n\nexport const selectMovieSort = (state) => state.movieFilter.sort;\n\nexport default movieFilterSlice.reducer;\n","import React from 'react';\nimport { Checkbox } from 'antd';\n\nimport { VerticalFlexWrapper } from '../container/styledComponent';\n\nexport default function({ options, checked, onOptionClick }) {\n  return (\n    <VerticalFlexWrapper>\n      {options.map((option, idx) => (\n        <div key={option}>\n          <Checkbox\n            data-testid={`checkBox-${idx}`}\n            onChange={() => onOptionClick(option, checked[option])}\n            checked={checked[option]}\n          >\n            {option}\n          </Checkbox>\n        </div>\n      ))}\n    </VerticalFlexWrapper>\n  );\n}\n","import React from 'react';\nimport { Slider } from 'antd';\n\nexport default function({ min, max, selectMin, selectMax, onChange }) {\n  const marks = { [min]: min, [max]: max };\n  return (\n    <Slider\n      min={min}\n      max={max}\n      range\n      defaultValue={[selectMin, selectMax]}\n      step={0.1}\n      onChange={onChange}\n      marks={marks}\n    />\n  );\n}\n","import React from 'react';\n\nimport { Rate } from 'antd';\n\nimport {\n  MovieItemWrapper,\n  MovieItemSwatch,\n  BoldWrapper,\n} from '../container/styledComponent';\n\nexport default function MovieItem({ swatch, title, rating, onClick }) {\n  return (\n    <MovieItemWrapper>\n      <MovieItemSwatch src={swatch} onClick={onClick} alt={`${title} Poster`} />\n      <BoldWrapper>{title}</BoldWrapper>\n      <Rate allowHalf disabled value={rating} />\n    </MovieItemWrapper>\n  );\n}\n","import React from 'react';\nimport { Modal, Progress, Tooltip } from 'antd';\n\nimport {\n  HorizontalFlexWrapper,\n  MovieModalSwatch,\n  VerticalFlexWrapper,\n  BoldWrapper,\n  TextWrapper,\n  MovieModalSwatchWrapper,\n  Gap,\n} from '../container/styledComponent';\n\nexport default function MovieModal({\n  swatch,\n  title,\n  vote_average,\n  vote_count,\n  overview,\n  release_date,\n  original_language,\n  visible,\n  onClose,\n}) {\n  return (\n    <Modal\n      title={title}\n      centered\n      visible={visible}\n      footer={null}\n      onCancel={onClose}\n    >\n      <HorizontalFlexWrapper>\n        <MovieModalSwatchWrapper>\n          <MovieModalSwatch src={swatch} alt={`${title} Poster`} />\n        </MovieModalSwatchWrapper>\n        <VerticalFlexWrapper>\n          <HorizontalFlexWrapper>\n            <TextWrapper>{release_date}</TextWrapper>\n            <Gap />\n            <TextWrapper>{`Language: ${original_language}`}</TextWrapper>\n          </HorizontalFlexWrapper>\n          <div>\n            <Tooltip placement=\"right\" title={`${vote_count} Voting`}>\n              <Progress\n                width={40}\n                type=\"circle\"\n                percent={vote_average * 10}\n                strokeColor={getColorGradient(vote_average)}\n              />\n            </Tooltip>\n          </div>\n          <BoldWrapper>Overview</BoldWrapper>\n          <TextWrapper>{overview}</TextWrapper>\n        </VerticalFlexWrapper>\n      </HorizontalFlexWrapper>\n    </Modal>\n  );\n}\n\n// get color gradient based on rating\n// 0-10 -> red-green\nexport const getColorGradient = (rating) => {\n  const ratio = rating / 10;\n  return `rgb(${255 - 255 * ratio},${255 * ratio},0)`;\n};\n","import React from 'react';\nimport { Switch } from 'antd';\n\nexport default function({ checked, onChange }) {\n  return <Switch data-testid=\"switch\" checked={checked} onChange={onChange} />;\n}\n","import React from 'react';\nimport { Input } from 'antd';\n\nexport default function({ placeholder, onSearch }) {\n  return (\n    <Input.Search placeholder={placeholder} onSearch={onSearch} enterButton />\n  );\n}\n","import React from 'react';\n\nimport { Menu, Dropdown } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nexport default function({ select, options, onChange }) {\n  const menu = (\n    <Menu onClick={onChange}>\n      {options.map((option) => (\n        <Menu.Item key={option}>{option}</Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={menu}>\n      <a\n        className=\"ant-dropdown-link\"\n        href=\"/\"\n        onClick={(e) => e.preventDefault()}\n      >\n        {select} <DownOutlined />\n      </a>\n    </Dropdown>\n  );\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { List, Spin } from 'antd';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport {\n  Body,\n  HorizontalFlexWrapper,\n  CenteredWrapper,\n} from './styledComponent';\nimport {\n  fetchMovieData,\n  selectHasMoreData,\n  selectFirstUnfetchedPage,\n  selectLoadingMovieData,\n} from '../modules/movieData';\nimport { selectFilteredMovie } from '../modules/movieFilter';\nimport { MovieItem, MovieModal } from '../component';\nimport { POSTER_PREFIX } from '../constants';\n\nconst minMovieItemWidth = 200;\n\nexport default function MovieList() {\n  const bodyRef = useRef(null);\n\n  const [width, setWidth] = useState(0);\n  const [modalItem, setModalItem] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n\n  // get movieList from redux store\n  const movieList = useSelector(selectFilteredMovie);\n  const hasMoreData = useSelector(selectHasMoreData);\n  const nextFetchPage = useSelector(selectFirstUnfetchedPage);\n  const loading = useSelector(selectLoadingMovieData);\n  const dispatch = useDispatch();\n\n  // window resize handler\n  const handleResize = () => {\n    if (!bodyRef.current) return;\n    setWidth(bodyRef.current.offsetWidth);\n  };\n\n  useEffect(\n    () => {\n      // initial and update width property to dymanically update grid\n      const { offsetWidth: width, offsetHeight: height } = bodyRef.current;\n      setWidth(width);\n      window.addEventListener('resize', handleResize);\n\n      // this is a hacky way to make sure the app fetch enough data when user has a big screen\n      // the reason is because InfiniteScroll need scroll event to trigger loading more data\n      // if the initial data is not able to cover the full window, then no scroll bar will be rendered\n      // thus no scroll event will be fire so the app will not be able to load more data\n      const fetchPage = Math.ceil(\n        (Math.ceil(width / minMovieItemWidth) *\n          Math.ceil(height / minMovieItemWidth / 2)) /\n          20\n      );\n\n      dispatch(\n        fetchMovieData({ page: Array.from(Array(fetchPage), (_, i) => i + 1) })\n      );\n\n      // clean the resize event listener\n      return () => {\n        window.removeEventListener('resize', handleResize);\n      };\n    },\n    [dispatch]\n  );\n\n  useEffect(\n    () => {\n      setHasMore(hasMoreData);\n    },\n    [movieList, hasMoreData]\n  );\n\n  const renderMovieItem = (item) => (\n    <List.Item>\n      <MovieItem\n        {...parseItemData(item)}\n        onClick={() => {\n          setModalItem(item);\n        }}\n      />\n    </List.Item>\n  );\n\n  const handleInfiniteOnLoad = () =>\n    dispatch(fetchMovieData({ page: nextFetchPage }));\n\n  // add key={0} to fix the warning message about unique key\n  // https://github.com/oVirt/ovirt-web-ui/issues/562\n  const loader = (\n    <CenteredWrapper key={0}>\n      <HorizontalFlexWrapper>\n        <Spin style={{ marginRight: '20px' }} />\n        {'loading'}\n      </HorizontalFlexWrapper>\n    </CenteredWrapper>\n  );\n\n  return (\n    <Body ref={bodyRef}>\n      <InfiniteScroll\n        initialLoad={false}\n        pageStart={0}\n        loadMore={handleInfiniteOnLoad}\n        useWindow={false}\n        hasMore={hasMore}\n        loader={loading && loader}\n      >\n        {movieList.length ? (\n          <List\n            dataSource={movieList}\n            renderItem={renderMovieItem}\n            grid={{\n              gutter: 10,\n              column: getGridColumn(width),\n            }}\n          />\n        ) : (\n          <div />\n        )}\n      </InfiniteScroll>\n      <MovieModal\n        visible={!!modalItem}\n        {...parseItemData(modalItem || {})}\n        onClose={() => setModalItem(null)}\n      />\n    </Body>\n  );\n}\n// get gripColumn based on current window width, min item width is 200\nexport const getGridColumn = (width) =>\n  Math.max(Math.floor(width / minMovieItemWidth), 1);\n\n// parse the item data to include swatch url and rating based on 5\nexport const parseItemData = (item) => ({\n  ...item,\n  rating: item.vote_average / 2,\n  swatch: `${POSTER_PREFIX}${item.poster_path}`,\n});\n","import React from 'react';\n\nimport {\n  HorizontalFlexWrapper,\n  VerticalFlexWrapper,\n  BoldWrapper,\n  Gap,\n} from './styledComponent';\n\nconst verticalAlign = 'vertical';\n\nexport default function({ title, children, align = verticalAlign }) {\n  const Wrapper =\n    align === verticalAlign ? VerticalFlexWrapper : HorizontalFlexWrapper;\n  return (\n    <Wrapper>\n      {title && <BoldWrapper>{title}</BoldWrapper>}\n      {title && align !== verticalAlign && <Gap />}\n      {children}\n    </Wrapper>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Divider } from 'antd';\n\nimport { VerticalFlexWrapper } from './styledComponent';\nimport {\n  setMovieFilterVoting,\n  setMovieFilterLanguage,\n  setMovieFilterAdult,\n  setMovieFilterSearch,\n  setMovieSort,\n  selectMovieVoting,\n  selectLanguageOption,\n  selectMovieLanguage,\n  selectMovieAdult,\n  selectMovieSort,\n  sortOptions,\n} from '../modules/movieFilter';\nimport {\n  CheckboxGroup as LanguageFilter,\n  Slider as VotingFilter,\n  Switch as AdultFilter,\n  SearchBox as SearchFilter,\n  Dropdown as SortDropdown,\n} from '../component';\nimport TitleWrapper from './TitleWrapper';\n\nconst sortDropdownOptions = Object.keys(sortOptions);\n\nexport default function MovieFilter() {\n  const dispatch = useDispatch();\n\n  // read filter data from redux store\n  const voting = useSelector(selectMovieVoting);\n  const languageOptions = useSelector(selectLanguageOption);\n  const language = useSelector(selectMovieLanguage);\n  const adult = useSelector(selectMovieAdult);\n  const sort = useSelector(selectMovieSort);\n\n  // update redux store when search compoennt updates\n  const onVotingFilterChange = ([min, max]) =>\n    dispatch(setMovieFilterVoting({ min, max }));\n\n  const onLanguageFilterChange = (option) =>\n    dispatch(setMovieFilterLanguage(option));\n\n  const onAdultFilterChange = (check) => dispatch(setMovieFilterAdult(check));\n\n  const onSearchFilterChange = (search) => {\n    dispatch(setMovieFilterSearch(search));\n  };\n\n  const onSortFilterChange = (value) => {\n    dispatch(setMovieSort(value.key === 'item_0' ? '' : value.key));\n  };\n\n  return (\n    <VerticalFlexWrapper>\n      <SearchFilter\n        placeholder=\"Search Movie by Title\"\n        onSearch={onSearchFilterChange}\n      />\n      <Divider />\n      <TitleWrapper title=\"Language\">\n        <LanguageFilter\n          options={languageOptions}\n          checked={language}\n          onOptionClick={onLanguageFilterChange}\n        />\n      </TitleWrapper>\n      <Divider />\n      <TitleWrapper title=\"Adult Only\" align=\"horizontal\">\n        <AdultFilter checked={adult} onChange={onAdultFilterChange} />\n      </TitleWrapper>\n      <Divider />\n      <TitleWrapper title=\"Voting\">\n        <VotingFilter {...voting} onChange={onVotingFilterChange} />\n      </TitleWrapper>\n      <Divider />\n      <TitleWrapper title=\"Sort By:\" align=\"horizontal\">\n        <SortDropdown\n          select={sort}\n          options={sortDropdownOptions}\n          onChange={onSortFilterChange}\n        />\n      </TitleWrapper>\n    </VerticalFlexWrapper>\n  );\n}\n","import React, { useState } from 'react';\r\nimport { MenuOutlined } from '@ant-design/icons';\r\nimport { Drawer } from 'antd';\r\n\r\nimport { Root, Header } from './container/styledComponent';\r\n// import { fetchMovieData } from './modules/movieData';\r\nimport MovieList from './container/MovieList';\r\nimport MovieFilter from './container/MovieFilter';\r\n\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction App() {\r\n  const [showMenu, setShowMenu] = useState(false);\r\n\r\n  return (\r\n    <Root>\r\n      <Header>Movie Review App</Header>\r\n      <MenuOutlined\r\n        style={{\r\n          position: 'absolute',\r\n          right: '8px',\r\n          top: '8px',\r\n          fontSize: '32px',\r\n          color: '#fff',\r\n          cursor: 'pointer',\r\n        }}\r\n        onClick={() => setShowMenu(true)}\r\n      />\r\n      <MovieList />\r\n      <Drawer\r\n        title=\"Movie Filter\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={() => setShowMenu(false)}\r\n        visible={showMenu}\r\n        key=\"right\"\r\n        width={320}\r\n      >\r\n        <MovieFilter />\r\n      </Drawer>\r\n    </Root>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport movieDataReducer from '../modules/movieData';\r\nimport movieFilterReducer from '../modules/movieFilter';\r\nexport default configureStore({\r\n  reducer: {\r\n    movieData: movieDataReducer,\r\n    movieFilter: movieFilterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}